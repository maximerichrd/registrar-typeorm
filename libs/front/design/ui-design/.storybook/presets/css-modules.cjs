const { logger } = require('@storybook/node-logger');

async function webpackFinal(webpackConfig) {
  const cssRule = webpackConfig.module.rules.find((_) =>
    _.test.test('hello.css')
  );
  const cssModuleRule = cssRule.oneOf.find((_) =>
    _.test.test('hello.module.css')
  );

  const styleLoader = cssModuleRule.use.find((entry) =>
    entry.loader.includes('style-loader')
  );
  const cssLoader = cssModuleRule.use.find((entry) =>
    entry.loader.includes('css-loader')
  );
  const postCssLoader = cssModuleRule.use.find((entry) =>
    entry.loader.includes('postcss-loader')
  );

  if (!cssModuleRule || !styleLoader || !cssLoader || !postCssLoader) {
    logger.warn(
      '=> Could not find all css rules so could not add css modules support'
    );
    return webpackConfig;
  } else {
    cssModuleRule.use = [
      // WARN: Order of rules is important for typings to work
      styleLoader,
      {
        loader: require.resolve(
          '@teamsupercell/typings-for-css-modules-loader'
        ),
        options: {
          banner:
            '// Autogenerated by typings-for-css-modules-loader.\n// Please do not modify this file !\n',
          verifyOnly: process.env.NODE_ENV === 'production',
        },
      },
      cssLoader,
      postCssLoader,
    ];
    logger.info('=> Using css modules preset');
    return {
      ...webpackConfig,
      watchOptions: {
        ignored: '**/*.css.d.ts',
      },
    };
  }
}

module.exports = {
  webpackFinal,
};
